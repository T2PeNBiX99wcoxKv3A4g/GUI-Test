// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable CheckNamespace
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GDExtensionBindgen;

public class LuaScriptResourceFormatSaver
{
    // Engine object used for calling engine methods
    protected readonly ResourceFormatSaver Object;

    public LuaScriptResourceFormatSaver() : this(NativeName)
    {
    }

    protected LuaScriptResourceFormatSaver(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaScriptResourceFormatSaver(Variant variant) : this((ResourceFormatSaver)variant)
    {
    }

    protected LuaScriptResourceFormatSaver(ResourceFormatSaver @object)
    {
        Object = @object;
    }

    public static implicit operator ResourceFormatSaver(LuaScriptResourceFormatSaver self) => self.Object;
    public static implicit operator Variant(LuaScriptResourceFormatSaver self) => self.Object;
    public static explicit operator LuaScriptResourceFormatSaver(Variant variant) => new(variant.AsGodotObject());

    public class PropertyName : ResourceFormatSaver.PropertyName
    {
    }

    public class MethodName : ResourceFormatSaver.MethodName
    {
    }

    public class SignalName : ResourceFormatSaver.SignalName
    {
    }

    private static readonly StringName NativeName = "LuaScriptResourceFormatSaver";

    #region Inherited Methods

    public bool InitRef()
    {
        return Object.InitRef();
    }

    public bool Reference()
    {
        return Object.Reference();
    }

    public bool Unreference()
    {
        return Object.Unreference();
    }

    public int GetReferenceCount()
    {
        return Object.GetReferenceCount();
    }

    public void Free()
    {
        Object.Free();
    }

    public string GetClass()
    {
        return Object.GetClass();
    }

    public bool IsClass(string @class)
    {
        return Object.IsClass(@class);
    }

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property)
    {
        return Object.Get(property);
    }

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath)
    {
        return Object.GetIndexed(propertyPath);
    }

    public Array<Dictionary> GetPropertyList()
    {
        return Object.GetPropertyList();
    }

    public Array<Dictionary> GetMethodList()
    {
        return Object.GetMethodList();
    }

    public bool PropertyCanRevert(StringName property)
    {
        return Object.PropertyCanRevert(property);
    }

    public Variant PropertyGetRevert(StringName property)
    {
        return Object.PropertyGetRevert(property);
    }

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString()
    {
        return Object.ToString();
    }

    public ulong GetInstanceId()
    {
        return Object.GetInstanceId();
    }

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript()
    {
        return Object.GetScript();
    }

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default)
    {
        return Object.GetMeta(name, @default);
    }

    public bool HasMeta(StringName name)
    {
        return Object.HasMeta(name);
    }

    public Array<StringName> GetMetaList()
    {
        return Object.GetMetaList();
    }

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new Array();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal)
    {
        return Object.HasUserSignal(signal);
    }

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs)
    {
        return Object.EmitSignal(signal, varargs);
    }

    public Variant Call(StringName method, params Variant[] varargs)
    {
        return Object.Call(method, varargs);
    }

    public Variant CallDeferred(StringName method, params Variant[] varargs)
    {
        return Object.CallDeferred(method, varargs);
    }

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray)
    {
        return Object.Callv(method, argArray);
    }

    public bool HasMethod(StringName method)
    {
        return Object.HasMethod(method);
    }

    public int GetMethodArgumentCount(StringName method)
    {
        return Object.GetMethodArgumentCount(method);
    }

    public bool HasSignal(StringName signal)
    {
        return Object.HasSignal(signal);
    }

    public Array<Dictionary> GetSignalList()
    {
        return Object.GetSignalList();
    }

    public Array<Dictionary> GetSignalConnectionList(StringName signal)
    {
        return Object.GetSignalConnectionList(signal);
    }

    public Array<Dictionary> GetIncomingConnections()
    {
        return Object.GetIncomingConnections();
    }

    public Error Connect(StringName signal, Callable callable, uint flags = 0)
    {
        return Object.Connect(signal, callable, flags);
    }

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable)
    {
        return Object.IsConnected(signal, callable);
    }

    public bool HasConnections(StringName signal)
    {
        return Object.HasConnections(signal);
    }

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals()
    {
        return Object.IsBlockingSignals();
    }

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages()
    {
        return Object.CanTranslateMessages();
    }

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain()
    {
        return Object.GetTranslationDomain();
    }

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion()
    {
        return Object.IsQueuedForDeletion();
    }

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}