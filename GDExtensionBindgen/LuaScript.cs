// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable CheckNamespace
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GDExtensionBindgen;

public class LuaScript
{
    // Engine object used for calling engine methods
    protected readonly ScriptExtension Object;

    public LuaScript() : this(NativeName)
    {
    }

    protected LuaScript(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaScript(Variant variant) : this((ScriptExtension)variant)
    {
    }

    protected LuaScript(ScriptExtension @object)
    {
        Object = @object;
    }

    public static implicit operator ScriptExtension(LuaScript self) => self.Object;
    public static implicit operator Variant(LuaScript self) => self.Object;
    public static explicit operator LuaScript(Variant variant) => new(variant.AsGodotObject());

    public class PropertyName : ScriptExtension.PropertyName
    {
        public static readonly StringName ImportBehavior = "import_behavior";
        public static readonly StringName LooksLikeGodotScript = "looks_like_godot_script";
    }

    public class MethodName : ScriptExtension.MethodName
    {
        public static readonly StringName New = "new";
        public static readonly StringName SetImportBehavior = "set_import_behavior";
        public static readonly StringName GetImportBehavior = "get_import_behavior";
        public static readonly StringName GetLooksLikeGodotScript = "get_looks_like_godot_script";
    }

    public class SignalName : ScriptExtension.SignalName
    {
    }

    private static readonly StringName NativeName = "LuaScript";

    #region Enums

    public enum ImportBehaviorEnum : long
    {
        Automatic = 0L,
        AlwaysEvaluate = 1L,
        DontLoad = 2L,
    }

    #endregion

    #region Properties

    public int ImportBehavior
    {
        get => (int)Object.Get(PropertyName.ImportBehavior);
        set => Object.Set(PropertyName.ImportBehavior, value);
    }

    public bool LooksLikeGodotScript => (bool)Object.Get(PropertyName.LooksLikeGodotScript);

    #endregion

    #region Inherited Properties

    public string SourceCode
    {
        get => Object.SourceCode;
        set => Object.SourceCode = value;
    }

    public bool ResourceLocalToScene
    {
        get => Object.ResourceLocalToScene;
        set => Object.ResourceLocalToScene = value;
    }

    public string ResourcePath
    {
        get => Object.ResourcePath;
        set => Object.ResourcePath = value;
    }

    public string ResourceName
    {
        get => Object.ResourceName;
        set => Object.ResourceName = value;
    }

    public string ResourceSceneUniqueId
    {
        get => Object.ResourceSceneUniqueId;
        set => Object.ResourceSceneUniqueId = value;
    }

    #endregion

    #region Methods

    public Variant New(params Variant[] varargs)
    {
        return Object.Call(MethodName.New, varargs);
    }

    public void SetImportBehavior(ImportBehaviorEnum importBehavior)
    {
        Object.Call(MethodName.SetImportBehavior, (int)importBehavior);
    }

    public ImportBehaviorEnum GetImportBehavior()
    {
        return (ImportBehaviorEnum)(int)Object.Call(MethodName.GetImportBehavior);
    }

    public bool GetLooksLikeGodotScript()
    {
        return (bool)Object.Call(MethodName.GetLooksLikeGodotScript);
    }

    #endregion

    #region Inherited Methods

    public bool CanInstantiate()
    {
        return Object.CanInstantiate();
    }

    public bool InstanceHas(GodotObject baseObject)
    {
        return Object.InstanceHas(baseObject);
    }

    public bool HasSourceCode()
    {
        return Object.HasSourceCode();
    }

    public string GetSourceCode()
    {
        return Object.GetSourceCode();
    }

    public void SetSourceCode(string source)
    {
        Object.SetSourceCode(source);
    }

    public Error Reload(bool keepState = false)
    {
        return Object.Reload(keepState);
    }

    public Script GetBaseScript()
    {
        return Object.GetBaseScript();
    }

    public StringName GetInstanceBaseType()
    {
        return Object.GetInstanceBaseType();
    }

    public StringName GetGlobalName()
    {
        return Object.GetGlobalName();
    }

    public bool HasScriptSignal(StringName signalName)
    {
        return Object.HasScriptSignal(signalName);
    }

    public Array<Dictionary> GetScriptPropertyList()
    {
        return Object.GetScriptPropertyList();
    }

    public Array<Dictionary> GetScriptMethodList()
    {
        return Object.GetScriptMethodList();
    }

    public Array<Dictionary> GetScriptSignalList()
    {
        return Object.GetScriptSignalList();
    }

    public Dictionary GetScriptConstantMap()
    {
        return Object.GetScriptConstantMap();
    }

    public Variant GetPropertyDefaultValue(StringName property)
    {
        return Object.GetPropertyDefaultValue(property);
    }

    public bool IsTool()
    {
        return Object.IsTool();
    }

    public bool IsAbstract()
    {
        return Object.IsAbstract();
    }

    public Variant GetRpcConfig()
    {
        return Object.GetRpcConfig();
    }

    public void SetPath(string path)
    {
        Object.SetPath(path);
    }

    public void TakeOverPath(string path)
    {
        Object.TakeOverPath(path);
    }

    public string GetPath()
    {
        return Object.GetPath();
    }

    public void SetPathCache(string path)
    {
        Object.SetPathCache(path);
    }

    public void SetName(string name)
    {
        Object.SetName(name);
    }

    public string GetName()
    {
        return Object.GetName();
    }

    public Rid GetRid()
    {
        return Object.GetRid();
    }

    public void SetLocalToScene(bool enable)
    {
        Object.SetLocalToScene(enable);
    }

    public bool IsLocalToScene()
    {
        return Object.IsLocalToScene();
    }

    public Node GetLocalScene()
    {
        return Object.GetLocalScene();
    }

    [Obsolete("This method should only be called internally.")]
    public void SetupLocalToScene()
    {
        Object.SetupLocalToScene();
    }

    public void ResetState()
    {
        Object.ResetState();
    }

    public void SetIdForPath(string path, string id)
    {
        Object.SetIdForPath(path, id);
    }

    public string GetIdForPath(string path)
    {
        return Object.GetIdForPath(path);
    }

    public bool IsBuiltIn()
    {
        return Object.IsBuiltIn();
    }

    public static string GenerateSceneUniqueId()
    {
        return Resource.GenerateSceneUniqueId();
    }

    public void SetSceneUniqueId(string id)
    {
        Object.SetSceneUniqueId(id);
    }

    public string GetSceneUniqueId()
    {
        return Object.GetSceneUniqueId();
    }

    public void EmitChanged()
    {
        Object.EmitChanged();
    }

    public Resource Duplicate(bool deep = false)
    {
        return Object.Duplicate(deep);
    }

    public Resource DuplicateDeep(Resource.DeepDuplicateMode deepSubresourcesMode = (Resource.DeepDuplicateMode)1)
    {
        return Object.DuplicateDeep(deepSubresourcesMode);
    }

    public bool InitRef()
    {
        return Object.InitRef();
    }

    public bool Reference()
    {
        return Object.Reference();
    }

    public bool Unreference()
    {
        return Object.Unreference();
    }

    public int GetReferenceCount()
    {
        return Object.GetReferenceCount();
    }

    public void Free()
    {
        Object.Free();
    }

    public string GetClass()
    {
        return Object.GetClass();
    }

    public bool IsClass(string @class)
    {
        return Object.IsClass(@class);
    }

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property)
    {
        return Object.Get(property);
    }

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath)
    {
        return Object.GetIndexed(propertyPath);
    }

    public Array<Dictionary> GetPropertyList()
    {
        return Object.GetPropertyList();
    }

    public Array<Dictionary> GetMethodList()
    {
        return Object.GetMethodList();
    }

    public bool PropertyCanRevert(StringName property)
    {
        return Object.PropertyCanRevert(property);
    }

    public Variant PropertyGetRevert(StringName property)
    {
        return Object.PropertyGetRevert(property);
    }

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString()
    {
        return Object.ToString();
    }

    public ulong GetInstanceId()
    {
        return Object.GetInstanceId();
    }

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript()
    {
        return Object.GetScript();
    }

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default)
    {
        return Object.GetMeta(name, @default);
    }

    public bool HasMeta(StringName name)
    {
        return Object.HasMeta(name);
    }

    public Array<StringName> GetMetaList()
    {
        return Object.GetMetaList();
    }

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new Array();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal)
    {
        return Object.HasUserSignal(signal);
    }

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs)
    {
        return Object.EmitSignal(signal, varargs);
    }

    public Variant Call(StringName method, params Variant[] varargs)
    {
        return Object.Call(method, varargs);
    }

    public Variant CallDeferred(StringName method, params Variant[] varargs)
    {
        return Object.CallDeferred(method, varargs);
    }

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray)
    {
        return Object.Callv(method, argArray);
    }

    public bool HasMethod(StringName method)
    {
        return Object.HasMethod(method);
    }

    public int GetMethodArgumentCount(StringName method)
    {
        return Object.GetMethodArgumentCount(method);
    }

    public bool HasSignal(StringName signal)
    {
        return Object.HasSignal(signal);
    }

    public Array<Dictionary> GetSignalList()
    {
        return Object.GetSignalList();
    }

    public Array<Dictionary> GetSignalConnectionList(StringName signal)
    {
        return Object.GetSignalConnectionList(signal);
    }

    public Array<Dictionary> GetIncomingConnections()
    {
        return Object.GetIncomingConnections();
    }

    public Error Connect(StringName signal, Callable callable, uint flags = 0)
    {
        return Object.Connect(signal, callable, flags);
    }

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable)
    {
        return Object.IsConnected(signal, callable);
    }

    public bool HasConnections(StringName signal)
    {
        return Object.HasConnections(signal);
    }

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals()
    {
        return Object.IsBlockingSignals();
    }

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages()
    {
        return Object.CanTranslateMessages();
    }

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain()
    {
        return Object.GetTranslationDomain();
    }

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion()
    {
        return Object.IsQueuedForDeletion();
    }

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action Changed
    {
        add => Connect(Resource.SignalName.Changed, Callable.From(value));
        remove => Disconnect(Resource.SignalName.Changed, Callable.From(value));
    }

    public event Action SetupLocalToSceneRequested
    {
        add => Connect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
        remove => Disconnect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
    }

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}