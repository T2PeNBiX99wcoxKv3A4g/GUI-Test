// This code was automatically generated by GDExtension C# Bindgen

using Godot;
using Godot.Collections;

namespace GDExtensionBindgen;

public class LuaFunction : LuaObject
{
	public LuaFunction() : base(NativeName)
	{
	}
	protected LuaFunction(StringName @class) : base(@class)
	{
	}
	protected LuaFunction(Variant variant) : base(variant)
	{
	}
	protected LuaFunction(RefCounted @object) : base(@object)
	{
	}

	public static implicit operator RefCounted(LuaFunction self) => self?.Object;
	public static implicit operator Variant(LuaFunction self) => self?.Object;
	public static explicit operator LuaFunction(Variant variant) => variant.AsGodotObject() != null ? new LuaFunction(variant) : null;

	public new class PropertyName : LuaObject.PropertyName
	{

	}

	public new class MethodName : LuaObject.MethodName
	{
		public static readonly StringName Invokev = "invokev";
		public static readonly StringName Invoke = "invoke";
		public static readonly StringName ToCallable = "to_callable";
		public static readonly StringName GetDebugInfo = "get_debug_info";
	}

	public new class SignalName : LuaObject.SignalName
	{

	}

	private static readonly StringName NativeName = "LuaFunction";

	#region Methods

	public Variant Invokev(Array argArray)
	{
		return Object.Call(MethodName.Invokev, argArray);
	}

	public Variant Invoke(params Variant[] varargs)
	{
		return Object.Call(MethodName.Invoke, varargs);
	}

	public Callable ToCallable()
	{
		return (Callable)Object.Call(MethodName.ToCallable);
	}

	public LuaDebug GetDebugInfo()
	{
		return (LuaDebug)Object.Call(MethodName.GetDebugInfo);
	}

	#endregion
}
