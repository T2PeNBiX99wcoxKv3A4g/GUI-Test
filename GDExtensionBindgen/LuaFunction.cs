// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable CheckNamespace
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using Godot;
using Godot.Collections;

namespace GDExtensionBindgen;

public class LuaFunction : LuaObject
{
    public LuaFunction() : base(NativeName)
    {
    }

    protected LuaFunction(StringName @class) : base(@class)
    {
    }

    protected LuaFunction(Variant variant) : base(variant)
    {
    }

    protected LuaFunction(RefCounted @object) : base(@object)
    {
    }

    public static implicit operator RefCounted(LuaFunction self) => self.Object;
    public static implicit operator Variant(LuaFunction self) => self.Object;
    public static explicit operator LuaFunction(Variant variant) => new(variant.AsGodotObject());

    public new class PropertyName : LuaObject.PropertyName
    {
    }

    public new class MethodName : LuaObject.MethodName
    {
        public static readonly StringName Invokev = "invokev";
        public static readonly StringName Invoke = "invoke";
        public static readonly StringName ToCallable = "to_callable";
        public static readonly StringName GetDebugInfo = "get_debug_info";
    }

    public new class SignalName : LuaObject.SignalName
    {
    }

    private static readonly StringName NativeName = "LuaFunction";

    #region Methods

    public Variant Invokev(Array argArray)
    {
        return Object.Call(MethodName.Invokev, argArray);
    }

    public Variant Invoke(params Variant[] varargs)
    {
        return Object.Call(MethodName.Invoke, varargs);
    }

    public Callable ToCallable()
    {
        return (Callable)Object.Call(MethodName.ToCallable);
    }

    public LuaDebug GetDebugInfo()
    {
        return (LuaDebug)Object.Call(MethodName.GetDebugInfo);
    }

    #endregion
}