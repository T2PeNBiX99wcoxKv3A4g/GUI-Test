// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GDExtensionBindgen;

public class LuaDebug
{
	// Engine object used for calling engine methods
	protected readonly RefCounted Object;

	public LuaDebug() : this(NativeName)
	{
	}
	protected LuaDebug(StringName @class) : this(ClassDB.Instantiate(@class))
	{
	}
	protected LuaDebug(Variant variant) : this((RefCounted) variant)
	{
	}
	protected LuaDebug(RefCounted @object)
	{
		Object = @object;
	}

	public static implicit operator RefCounted(LuaDebug self) => self?.Object;
	public static implicit operator Variant(LuaDebug self) => self?.Object;
	public static explicit operator LuaDebug(Variant variant) => variant.AsGodotObject() != null ? new LuaDebug(variant) : null;

	public class PropertyName : RefCounted.PropertyName
	{
		public static readonly StringName Event = "event";
		public static readonly StringName Name = "name";
		public static readonly StringName NameWhat = "name_what";
		public static readonly StringName What = "what";
		public static readonly StringName Source = "source";
		public static readonly StringName ShortSrc = "short_src";
		public static readonly StringName LineDefined = "line_defined";
		public static readonly StringName LastLineDefined = "last_line_defined";
		public static readonly StringName CurrentLine = "current_line";
		public static readonly StringName Nparams = "nparams";
	}

	public class MethodName : RefCounted.MethodName
	{
		public static readonly StringName GetEvent = "get_event";
		public static readonly StringName GetName = "get_name";
		public static readonly StringName GetNameWhat = "get_name_what";
		public static readonly StringName GetWhat = "get_what";
		public static readonly StringName GetSource = "get_source";
		public static readonly StringName GetShortSrc = "get_short_src";
		public static readonly StringName GetLineDefined = "get_line_defined";
		public static readonly StringName GetLastLineDefined = "get_last_line_defined";
		public static readonly StringName GetCurrentLine = "get_current_line";
		public static readonly StringName GetNparams = "get_nparams";
		public static readonly StringName IsTailCall = "is_tail_call";
		public static readonly StringName IsVararg = "is_vararg";
	}

	public class SignalName : RefCounted.SignalName
	{

	}

	private static readonly StringName NativeName = "LuaDebug";

	#region Properties

	public LuaThread.HookEvent Event => (LuaThread.HookEvent)(int)Object.Get(PropertyName.Event);

	public string Name => (string)Object.Get(PropertyName.Name);

	public string NameWhat => (string)Object.Get(PropertyName.NameWhat);

	public string What => (string)Object.Get(PropertyName.What);

	public string Source => (string)Object.Get(PropertyName.Source);

	public string ShortSrc => (string)Object.Get(PropertyName.ShortSrc);

	public int LineDefined => (int)Object.Get(PropertyName.LineDefined);

	public int LastLineDefined => (int)Object.Get(PropertyName.LastLineDefined);

	public int CurrentLine => (int)Object.Get(PropertyName.CurrentLine);

	public int Nparams => (int)Object.Get(PropertyName.Nparams);

	#endregion

	#region Methods

	public LuaThread.HookEvent GetEvent()
	{
		return (LuaThread.HookEvent)(int)Object.Call(MethodName.GetEvent);
	}

	public string GetName()
	{
		return (string)Object.Call(MethodName.GetName);
	}

	public string GetNameWhat()
	{
		return (string)Object.Call(MethodName.GetNameWhat);
	}

	public string GetWhat()
	{
		return (string)Object.Call(MethodName.GetWhat);
	}

	public string GetSource()
	{
		return (string)Object.Call(MethodName.GetSource);
	}

	public string GetShortSrc()
	{
		return (string)Object.Call(MethodName.GetShortSrc);
	}

	public int GetLineDefined()
	{
		return (int)Object.Call(MethodName.GetLineDefined);
	}

	public int GetLastLineDefined()
	{
		return (int)Object.Call(MethodName.GetLastLineDefined);
	}

	public int GetCurrentLine()
	{
		return (int)Object.Call(MethodName.GetCurrentLine);
	}

	public int GetNparams()
	{
		return (int)Object.Call(MethodName.GetNparams);
	}

	public bool IsTailCall()
	{
		return (bool)Object.Call(MethodName.IsTailCall);
	}

	public bool IsVararg()
	{
		return (bool)Object.Call(MethodName.IsVararg);
	}

	#endregion

	#region Inherited Methods

	public bool InitRef()
	{
		return Object.InitRef();
	}

	public bool Reference()
	{
		return Object.Reference();
	}

	public bool Unreference()
	{
		return Object.Unreference();
	}

	public int GetReferenceCount()
	{
		return Object.GetReferenceCount();
	}

	public void Free()
	{
		Object.Free();
	}

	public string GetClass()
	{
		return Object.GetClass();
	}

	public bool IsClass(string @class)
	{
		return Object.IsClass(@class);
	}

	public void Set(StringName property, Variant value)
	{
		Object.Set(property, value);
	}

	public Variant Get(StringName property)
	{
		return Object.Get(property);
	}

	public void SetIndexed(NodePath propertyPath, Variant value)
	{
		Object.SetIndexed(propertyPath, value);
	}

	public Variant GetIndexed(NodePath propertyPath)
	{
		return Object.GetIndexed(propertyPath);
	}

	public Array<Dictionary> GetPropertyList()
	{
		return Object.GetPropertyList();
	}

	public Array<Dictionary> GetMethodList()
	{
		return Object.GetMethodList();
	}

	public bool PropertyCanRevert(StringName property)
	{
		return Object.PropertyCanRevert(property);
	}

	public Variant PropertyGetRevert(StringName property)
	{
		return Object.PropertyGetRevert(property);
	}

	public void Notification(int what, bool reversed = false)
	{
		Object.Notification(what, reversed);
	}

	public override string ToString()
	{
		return Object.ToString();
	}

	public ulong GetInstanceId()
	{
		return Object.GetInstanceId();
	}

	public void SetScript(Variant script)
	{
		Object.SetScript(script);
	}

	public Variant GetScript()
	{
		return Object.GetScript();
	}

	public void SetMeta(StringName name, Variant value)
	{
		Object.SetMeta(name, value);
	}

	public void RemoveMeta(StringName name)
	{
		Object.RemoveMeta(name);
	}

	public Variant GetMeta(StringName name, Variant @default = default)
	{
		return Object.GetMeta(name, @default);
	}

	public bool HasMeta(StringName name)
	{
		return Object.HasMeta(name);
	}

	public Array<StringName> GetMetaList()
	{
		return Object.GetMetaList();
	}

	public void AddUserSignal(string signal, Array arguments = null)
	{
		arguments ??= new Array();
		Object.AddUserSignal(signal, arguments);
	}

	public bool HasUserSignal(StringName signal)
	{
		return Object.HasUserSignal(signal);
	}

	public void RemoveUserSignal(StringName signal)
	{
		Object.RemoveUserSignal(signal);
	}

	public Error EmitSignal(StringName signal, params Variant[] varargs)
	{
		return Object.EmitSignal(signal, varargs);
	}

	public Variant Call(StringName method, params Variant[] varargs)
	{
		return Object.Call(method, varargs);
	}

	public Variant CallDeferred(StringName method, params Variant[] varargs)
	{
		return Object.CallDeferred(method, varargs);
	}

	public void SetDeferred(StringName property, Variant value)
	{
		Object.SetDeferred(property, value);
	}

	public Variant Callv(StringName method, Array argArray)
	{
		return Object.Callv(method, argArray);
	}

	public bool HasMethod(StringName method)
	{
		return Object.HasMethod(method);
	}

	public int GetMethodArgumentCount(StringName method)
	{
		return Object.GetMethodArgumentCount(method);
	}

	public bool HasSignal(StringName signal)
	{
		return Object.HasSignal(signal);
	}

	public Array<Dictionary> GetSignalList()
	{
		return Object.GetSignalList();
	}

	public Array<Dictionary> GetSignalConnectionList(StringName signal)
	{
		return Object.GetSignalConnectionList(signal);
	}

	public Array<Dictionary> GetIncomingConnections()
	{
		return Object.GetIncomingConnections();
	}

	public Error Connect(StringName signal, Callable callable, uint flags = 0)
	{
		return Object.Connect(signal, callable, flags);
	}

	public void Disconnect(StringName signal, Callable callable)
	{
		Object.Disconnect(signal, callable);
	}

	public bool IsConnected(StringName signal, Callable callable)
	{
		return Object.IsConnected(signal, callable);
	}

	public bool HasConnections(StringName signal)
	{
		return Object.HasConnections(signal);
	}

	public void SetBlockSignals(bool enable)
	{
		Object.SetBlockSignals(enable);
	}

	public bool IsBlockingSignals()
	{
		return Object.IsBlockingSignals();
	}

	public void NotifyPropertyListChanged()
	{
		Object.NotifyPropertyListChanged();
	}

	public void SetMessageTranslation(bool enable)
	{
		Object.SetMessageTranslation(enable);
	}

	public bool CanTranslateMessages()
	{
		return Object.CanTranslateMessages();
	}

	public string Tr(StringName message, StringName context = null)
	{
		context ??= "";
		return Object.Tr(message, context);
	}

	public string TrN(StringName message, StringName pluralMessage, int n, StringName context = null)
	{
		context ??= "";
		return Object.TrN(message, pluralMessage, n, context);
	}

	public StringName GetTranslationDomain()
	{
		return Object.GetTranslationDomain();
	}

	public void SetTranslationDomain(StringName domain)
	{
		Object.SetTranslationDomain(domain);
	}

	public bool IsQueuedForDeletion()
	{
		return Object.IsQueuedForDeletion();
	}

	public void CancelFree()
	{
		Object.CancelFree();
	}

	#endregion

	#region Inherited Signals

	public event Action ScriptChanged
	{
		add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
		remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
	}

	public event Action PropertyListChanged
	{
		add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
		remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
	}

	#endregion
}
