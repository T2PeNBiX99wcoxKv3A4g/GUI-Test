// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GUITest.scripts.Proxy;

public class LuaObject
{
    private static readonly StringName NativeName = "LuaObject";

    // Engine object used for calling engine methods
    protected readonly RefCounted Object;

    public LuaObject() : this(NativeName)
    {
    }

    protected LuaObject(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaObject(Variant variant) : this((RefCounted)variant)
    {
    }

    protected LuaObject(RefCounted @object) => Object = @object;

    public static implicit operator RefCounted?(LuaObject? self) => self?.Object;

    public static implicit operator Variant(LuaObject? self) => self?.Object!;

    public static explicit operator LuaObject?(Variant variant)
    {
        return variant.IfIsGodotObject(variant1 => new LuaObject(variant1));
    }

    public class PropertyName : RefCounted.PropertyName
    {
    }

    public class MethodName : RefCounted.MethodName
    {
        public static readonly StringName GetLuaState = "get_lua_state";
        public static readonly StringName GetPointerValue = "get_pointer_value";
    }

    public class SignalName : RefCounted.SignalName
    {
    }

    #region Methods

    public LuaState? GetLuaState() => (LuaState?)Object.Call(MethodName.GetLuaState);

    public int GetPointerValue() => (int)Object.Call(MethodName.GetPointerValue);

    #endregion

    #region Inherited Methods

    public bool InitRef() => Object.InitRef();

    public bool Reference() => Object.Reference();

    public bool Unreference() => Object.Unreference();

    public int GetReferenceCount() => Object.GetReferenceCount();

    public void Free()
    {
        Object.Free();
    }

    public string GetClass() => Object.GetClass();

    public bool IsClass(string @class) => Object.IsClass(@class);

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property) => Object.Get(property);

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath) => Object.GetIndexed(propertyPath);

    public Array<Dictionary> GetPropertyList() => Object.GetPropertyList();

    public Array<Dictionary> GetMethodList() => Object.GetMethodList();

    public bool PropertyCanRevert(StringName property) => Object.PropertyCanRevert(property);

    public Variant PropertyGetRevert(StringName property) => Object.PropertyGetRevert(property);

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString() => Object.ToString();

    public ulong GetInstanceId() => Object.GetInstanceId();

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript() => Object.GetScript();

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default) => Object.GetMeta(name, @default);

    public bool HasMeta(StringName name) => Object.HasMeta(name);

    public Array<StringName> GetMetaList() => Object.GetMetaList();

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal) => Object.HasUserSignal(signal);

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs) => Object.EmitSignal(signal, varargs);

    public Variant Call(StringName method, params Variant[] varargs) => Object.Call(method, varargs);

    public Variant CallDeferred(StringName method, params Variant[] varargs) => Object.CallDeferred(method, varargs);

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray) => Object.Callv(method, argArray);

    public bool HasMethod(StringName method) => Object.HasMethod(method);

    public int GetMethodArgumentCount(StringName method) => Object.GetMethodArgumentCount(method);

    public bool HasSignal(StringName signal) => Object.HasSignal(signal);

    public Array<Dictionary> GetSignalList() => Object.GetSignalList();

    public Array<Dictionary> GetSignalConnectionList(StringName signal) => Object.GetSignalConnectionList(signal);

    public Array<Dictionary> GetIncomingConnections() => Object.GetIncomingConnections();

    public Error Connect(StringName signal, Callable callable, uint flags = 0) =>
        Object.Connect(signal, callable, flags);

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable) => Object.IsConnected(signal, callable);

    public bool HasConnections(StringName signal) => Object.HasConnections(signal);

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals() => Object.IsBlockingSignals();

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages() => Object.CanTranslateMessages();

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain() => Object.GetTranslationDomain();

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion() => Object.IsQueuedForDeletion();

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}