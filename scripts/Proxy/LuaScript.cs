// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GUITest.scripts.Proxy;

public class LuaScript
{
    #region Enums

    public enum ImportBehaviorEnum : long
    {
        Automatic = 0L,
        AlwaysEvaluate = 1L,
        DontLoad = 2L
    }

    #endregion

    private static readonly StringName NativeName = "LuaScript";

    // Engine object used for calling engine methods
    protected readonly ScriptExtension Object;

    public LuaScript() : this(NativeName)
    {
    }

    protected LuaScript(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaScript(Variant variant) : this((ScriptExtension)variant)
    {
    }

    protected LuaScript(ScriptExtension @object) => Object = @object;

    public static implicit operator ScriptExtension?(LuaScript? self) => self?.Object;

    public static implicit operator Variant(LuaScript? self) => self?.Object!;

    public static implicit operator LuaScript?(ScriptExtension? scriptExtension) =>
        scriptExtension != null ? new(scriptExtension) : null;

    public static explicit operator LuaScript?(Variant variant)
    {
        return variant.IfIsGodotObject(variant1 => new LuaScript(variant1));
    }

    public static LuaScript? Load(string path)
    {
        var scriptExt = GD.Load<ScriptExtension?>(path);
        return scriptExt != null ? (LuaScript?)scriptExt : null;
    }

    public class PropertyName : ScriptExtension.PropertyName
    {
        public static readonly StringName ImportBehavior = "import_behavior";
        public static readonly StringName LooksLikeGodotScript = "looks_like_godot_script";
    }

    public class MethodName : ScriptExtension.MethodName
    {
        public static readonly StringName New = "new";
        public static readonly StringName SetImportBehavior = "set_import_behavior";
        public static readonly StringName GetImportBehavior = "get_import_behavior";
        public static readonly StringName GetLooksLikeGodotScript = "get_looks_like_godot_script";
    }

    public class SignalName : ScriptExtension.SignalName
    {
    }

    #region Properties

    public int ImportBehavior
    {
        get => (int)Object.Get(PropertyName.ImportBehavior);
        set => Object.Set(PropertyName.ImportBehavior, value);
    }

    public bool LooksLikeGodotScript => (bool)Object.Get(PropertyName.LooksLikeGodotScript);

    #endregion

    #region Inherited Properties

    public string SourceCode
    {
        get => Object.SourceCode;
        set => Object.SourceCode = value;
    }

    public bool ResourceLocalToScene
    {
        get => Object.ResourceLocalToScene;
        set => Object.ResourceLocalToScene = value;
    }

    public string ResourcePath
    {
        get => Object.ResourcePath;
        set => Object.ResourcePath = value;
    }

    public string ResourceName
    {
        get => Object.ResourceName;
        set => Object.ResourceName = value;
    }

    public string ResourceSceneUniqueId
    {
        get => Object.ResourceSceneUniqueId;
        set => Object.ResourceSceneUniqueId = value;
    }

    #endregion

    #region Methods

    public Variant New(params Variant[] varargs) => Object.Call(MethodName.New, varargs);

    public void SetImportBehavior(ImportBehaviorEnum importBehavior)
    {
        Object.Call(MethodName.SetImportBehavior, (int)importBehavior);
    }

    public ImportBehaviorEnum GetImportBehavior() => (ImportBehaviorEnum)(int)Object.Call(MethodName.GetImportBehavior);

    public bool GetLooksLikeGodotScript() => (bool)Object.Call(MethodName.GetLooksLikeGodotScript);

    #endregion

    #region Inherited Methods

    public bool CanInstantiate() => Object.CanInstantiate();

    public bool InstanceHas(GodotObject baseObject) => Object.InstanceHas(baseObject);

    public bool HasSourceCode() => Object.HasSourceCode();

    public string GetSourceCode() => Object.GetSourceCode();

    public void SetSourceCode(string source)
    {
        Object.SetSourceCode(source);
    }

    public Error Reload(bool keepState = false) => Object.Reload(keepState);

    public Script GetBaseScript() => Object.GetBaseScript();

    public StringName GetInstanceBaseType() => Object.GetInstanceBaseType();

    public StringName GetGlobalName() => Object.GetGlobalName();

    public bool HasScriptSignal(StringName signalName) => Object.HasScriptSignal(signalName);

    public Array<Dictionary> GetScriptPropertyList() => Object.GetScriptPropertyList();

    public Array<Dictionary> GetScriptMethodList() => Object.GetScriptMethodList();

    public Array<Dictionary> GetScriptSignalList() => Object.GetScriptSignalList();

    public Dictionary GetScriptConstantMap() => Object.GetScriptConstantMap();

    public Variant GetPropertyDefaultValue(StringName property) => Object.GetPropertyDefaultValue(property);

    public bool IsTool() => Object.IsTool();

    public bool IsAbstract() => Object.IsAbstract();

    public Variant GetRpcConfig() => Object.GetRpcConfig();

    public void SetPath(string path)
    {
        Object.SetPath(path);
    }

    public void TakeOverPath(string path)
    {
        Object.TakeOverPath(path);
    }

    public string GetPath() => Object.GetPath();

    public void SetPathCache(string path)
    {
        Object.SetPathCache(path);
    }

    public void SetName(string name)
    {
        Object.SetName(name);
    }

    public string GetName() => Object.GetName();

    public Rid GetRid() => Object.GetRid();

    public void SetLocalToScene(bool enable)
    {
        Object.SetLocalToScene(enable);
    }

    public bool IsLocalToScene() => Object.IsLocalToScene();

    public Node GetLocalScene() => Object.GetLocalScene();

    [Obsolete("This method should only be called internally.")]
    public void SetupLocalToScene()
    {
        Object.SetupLocalToScene();
    }

    public void ResetState()
    {
        Object.ResetState();
    }

    public void SetIdForPath(string path, string id)
    {
        Object.SetIdForPath(path, id);
    }

    public string GetIdForPath(string path) => Object.GetIdForPath(path);

    public bool IsBuiltIn() => Object.IsBuiltIn();

    public static string GenerateSceneUniqueId() => Resource.GenerateSceneUniqueId();

    public void SetSceneUniqueId(string id)
    {
        Object.SetSceneUniqueId(id);
    }

    public string GetSceneUniqueId() => Object.GetSceneUniqueId();

    public void EmitChanged()
    {
        Object.EmitChanged();
    }

    public Resource Duplicate(bool deep = false) => Object.Duplicate(deep);

    public Resource DuplicateDeep(Resource.DeepDuplicateMode deepSubresourcesMode = (Resource.DeepDuplicateMode)1) =>
        Object.DuplicateDeep(deepSubresourcesMode);

    public bool InitRef() => Object.InitRef();

    public bool Reference() => Object.Reference();

    public bool Unreference() => Object.Unreference();

    public int GetReferenceCount() => Object.GetReferenceCount();

    public void Free()
    {
        Object.Free();
    }

    public string GetClass() => Object.GetClass();

    public bool IsClass(string @class) => Object.IsClass(@class);

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property) => Object.Get(property);

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath) => Object.GetIndexed(propertyPath);

    public Array<Dictionary> GetPropertyList() => Object.GetPropertyList();

    public Array<Dictionary> GetMethodList() => Object.GetMethodList();

    public bool PropertyCanRevert(StringName property) => Object.PropertyCanRevert(property);

    public Variant PropertyGetRevert(StringName property) => Object.PropertyGetRevert(property);

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString() => Object.ToString();

    public ulong GetInstanceId() => Object.GetInstanceId();

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript() => Object.GetScript();

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default) => Object.GetMeta(name, @default);

    public bool HasMeta(StringName name) => Object.HasMeta(name);

    public Array<StringName> GetMetaList() => Object.GetMetaList();

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal) => Object.HasUserSignal(signal);

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs) => Object.EmitSignal(signal, varargs);

    public Variant Call(StringName method, params Variant[] varargs) => Object.Call(method, varargs);

    public Variant CallDeferred(StringName method, params Variant[] varargs) => Object.CallDeferred(method, varargs);

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray) => Object.Callv(method, argArray);

    public bool HasMethod(StringName method) => Object.HasMethod(method);

    public int GetMethodArgumentCount(StringName method) => Object.GetMethodArgumentCount(method);

    public bool HasSignal(StringName signal) => Object.HasSignal(signal);

    public Array<Dictionary> GetSignalList() => Object.GetSignalList();

    public Array<Dictionary> GetSignalConnectionList(StringName signal) => Object.GetSignalConnectionList(signal);

    public Array<Dictionary> GetIncomingConnections() => Object.GetIncomingConnections();

    public Error Connect(StringName signal, Callable callable, uint flags = 0) =>
        Object.Connect(signal, callable, flags);

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable) => Object.IsConnected(signal, callable);

    public bool HasConnections(StringName signal) => Object.HasConnections(signal);

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals() => Object.IsBlockingSignals();

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages() => Object.CanTranslateMessages();

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain() => Object.GetTranslationDomain();

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion() => Object.IsQueuedForDeletion();

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action Changed
    {
        add => Connect(Resource.SignalName.Changed, Callable.From(value));
        remove => Disconnect(Resource.SignalName.Changed, Callable.From(value));
    }

    public event Action SetupLocalToSceneRequested
    {
        add => Connect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
        remove => Disconnect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
    }

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}