// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using Godot;
using Godot.Collections;

namespace GUITest.scripts.Proxy;

public class LuaTable : LuaObject
{
	public LuaTable() : base(NativeName)
	{
	}
	protected LuaTable(StringName @class) : base(@class)
	{
	}
	protected LuaTable(Variant variant) : base(variant)
	{
	}
	protected LuaTable(RefCounted @object) : base(@object)
	{
	}

	public static implicit operator RefCounted(LuaTable self) => self.Object;
	public static implicit operator Variant(LuaTable self) => self.Object;
	public static explicit operator LuaTable(Variant variant) => new(variant.AsGodotObject());

	public new class PropertyName : LuaObject.PropertyName
	{

	}

	public new class MethodName : LuaObject.MethodName
	{
		public static readonly StringName Rawget = "rawget";
		public static readonly StringName Rawset = "rawset";
		public static readonly StringName Clear = "clear";
		public static readonly StringName Length = "length";
		public static readonly StringName ToDictionary = "to_dictionary";
		public static readonly StringName ToArray = "to_array";
		public static readonly StringName GetMetatable = "get_metatable";
		public static readonly StringName SetMetatable = "set_metatable";
	}

	public new class SignalName : LuaObject.SignalName
	{

	}

	private static readonly StringName NativeName = "LuaTable";

	#region Methods

	public Variant Get(Variant key, Variant @default = default)
	{
		return Object.Call(GodotObject.MethodName.Get, key, @default);
	}

	public void Set(Variant key, Variant value)
	{
		Object.Call(GodotObject.MethodName.Set, key, value);
	}

	public Variant Rawget(Variant key, Variant @default = default)
	{
		return Object.Call(MethodName.Rawget, key, @default);
	}

	public void Rawset(Variant key, Variant value)
	{
		Object.Call(MethodName.Rawset, key, value);
	}

	public void Clear()
	{
		Object.Call(MethodName.Clear);
	}

	public int Length()
	{
		return (int)Object.Call(MethodName.Length);
	}

	public Dictionary ToDictionary()
	{
		return (Dictionary)Object.Call(MethodName.ToDictionary);
	}

	public Array ToArray()
	{
		return (Array)Object.Call(MethodName.ToArray);
	}

	public LuaTable GetMetatable()
	{
		return (LuaTable)Object.Call(MethodName.GetMetatable);
	}

	public void SetMetatable(LuaTable metatable)
	{
		Object.Call(MethodName.SetMetatable, metatable);
	}

	#endregion
}
