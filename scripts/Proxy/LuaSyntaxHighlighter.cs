// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen

using System;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GUITest.scripts.Proxy;

public class LuaSyntaxHighlighter
{
    private static readonly StringName NativeName = "LuaSyntaxHighlighter";

    // Engine object used for calling engine methods
    protected readonly CodeHighlighter Object;

    public LuaSyntaxHighlighter() : this(NativeName)
    {
    }

    protected LuaSyntaxHighlighter(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaSyntaxHighlighter(Variant variant) : this((CodeHighlighter)variant)
    {
    }

    protected LuaSyntaxHighlighter(CodeHighlighter @object) => Object = @object;

    public static implicit operator CodeHighlighter?(LuaSyntaxHighlighter? self) => self?.Object;

    public static implicit operator Variant(LuaSyntaxHighlighter? self) => self?.Object!;

    public static explicit operator LuaSyntaxHighlighter?(Variant variant)
    {
        return variant.IfIsGodotObject(variant1 => new LuaSyntaxHighlighter(variant1));
    }

    public class PropertyName : CodeHighlighter.PropertyName
    {
        public static readonly StringName FillEditorColorsCallable = "fill_editor_colors_callable";
        public static readonly StringName LuaKeywordColor = "lua_keyword_color";
        public static readonly StringName LuaMemberKeywordColor = "lua_member_keyword_color";
        public static readonly StringName StringColor = "string_color";
        public static readonly StringName CommentColor = "comment_color";
    }

    public class MethodName : CodeHighlighter.MethodName
    {
        public static readonly StringName FillEditorColors = "fill_editor_colors";
        public static readonly StringName GetFillEditorColors = "get_fill_editor_colors";
        public static readonly StringName GetLuaKeywordColor = "get_lua_keyword_color";
        public static readonly StringName SetLuaKeywordColor = "set_lua_keyword_color";
        public static readonly StringName GetLuaMemberKeywordColor = "get_lua_member_keyword_color";
        public static readonly StringName SetLuaMemberKeywordColor = "set_lua_member_keyword_color";
        public static readonly StringName GetStringColor = "get_string_color";
        public static readonly StringName SetStringColor = "set_string_color";
        public static readonly StringName GetCommentColor = "get_comment_color";
        public static readonly StringName SetCommentColor = "set_comment_color";
    }

    public class SignalName : CodeHighlighter.SignalName
    {
    }

    #region Properties

    public Callable FillEditorColorsCallable => (Callable)Object.Get(PropertyName.FillEditorColorsCallable);

    public Color LuaKeywordColor
    {
        get => (Color)Object.Get(PropertyName.LuaKeywordColor);
        set => Object.Set(PropertyName.LuaKeywordColor, value);
    }

    public Color LuaMemberKeywordColor
    {
        get => (Color)Object.Get(PropertyName.LuaMemberKeywordColor);
        set => Object.Set(PropertyName.LuaMemberKeywordColor, value);
    }

    public Color StringColor
    {
        get => (Color)Object.Get(PropertyName.StringColor);
        set => Object.Set(PropertyName.StringColor, value);
    }

    public Color CommentColor
    {
        get => (Color)Object.Get(PropertyName.CommentColor);
        set => Object.Set(PropertyName.CommentColor, value);
    }

    #endregion

    #region Inherited Properties

    public Color NumberColor
    {
        get => Object.NumberColor;
        set => Object.NumberColor = value;
    }

    public Color SymbolColor
    {
        get => Object.SymbolColor;
        set => Object.SymbolColor = value;
    }

    public Color FunctionColor
    {
        get => Object.FunctionColor;
        set => Object.FunctionColor = value;
    }

    public Color MemberVariableColor
    {
        get => Object.MemberVariableColor;
        set => Object.MemberVariableColor = value;
    }

    public Dictionary KeywordColors
    {
        get => Object.KeywordColors;
        set => Object.KeywordColors = value;
    }

    public Dictionary MemberKeywordColors
    {
        get => Object.MemberKeywordColors;
        set => Object.MemberKeywordColors = value;
    }

    public Dictionary ColorRegions
    {
        get => Object.ColorRegions;
        set => Object.ColorRegions = value;
    }

    public bool ResourceLocalToScene
    {
        get => Object.ResourceLocalToScene;
        set => Object.ResourceLocalToScene = value;
    }

    public string ResourcePath
    {
        get => Object.ResourcePath;
        set => Object.ResourcePath = value;
    }

    public string ResourceName
    {
        get => Object.ResourceName;
        set => Object.ResourceName = value;
    }

    public string ResourceSceneUniqueId
    {
        get => Object.ResourceSceneUniqueId;
        set => Object.ResourceSceneUniqueId = value;
    }

    #endregion

    #region Methods

    public void FillEditorColors()
    {
        Object.Call(MethodName.FillEditorColors);
    }

    public Callable GetFillEditorColors() => (Callable)Object.Call(MethodName.GetFillEditorColors);

    public Color GetLuaKeywordColor() => (Color)Object.Call(MethodName.GetLuaKeywordColor);

    public void SetLuaKeywordColor(Color color)
    {
        Object.Call(MethodName.SetLuaKeywordColor, color);
    }

    public Color GetLuaMemberKeywordColor() => (Color)Object.Call(MethodName.GetLuaMemberKeywordColor);

    public void SetLuaMemberKeywordColor(Color color)
    {
        Object.Call(MethodName.SetLuaMemberKeywordColor, color);
    }

    public Color GetStringColor() => (Color)Object.Call(MethodName.GetStringColor);

    public void SetStringColor(Color color)
    {
        Object.Call(MethodName.SetStringColor, color);
    }

    public Color GetCommentColor() => (Color)Object.Call(MethodName.GetCommentColor);

    public void SetCommentColor(Color color)
    {
        Object.Call(MethodName.SetCommentColor, color);
    }

    #endregion

    #region Inherited Methods

    public void AddKeywordColor(string keyword, Color color)
    {
        Object.AddKeywordColor(keyword, color);
    }

    public void RemoveKeywordColor(string keyword)
    {
        Object.RemoveKeywordColor(keyword);
    }

    public bool HasKeywordColor(string keyword) => Object.HasKeywordColor(keyword);

    public Color GetKeywordColor(string keyword) => Object.GetKeywordColor(keyword);

    public void SetKeywordColors(Dictionary keywords)
    {
        Object.SetKeywordColors(keywords);
    }

    public void ClearKeywordColors()
    {
        Object.ClearKeywordColors();
    }

    public Dictionary GetKeywordColors() => Object.GetKeywordColors();

    public void AddMemberKeywordColor(string memberKeyword, Color color)
    {
        Object.AddMemberKeywordColor(memberKeyword, color);
    }

    public void RemoveMemberKeywordColor(string memberKeyword)
    {
        Object.RemoveMemberKeywordColor(memberKeyword);
    }

    public bool HasMemberKeywordColor(string memberKeyword) => Object.HasMemberKeywordColor(memberKeyword);

    public Color GetMemberKeywordColor(string memberKeyword) => Object.GetMemberKeywordColor(memberKeyword);

    public void SetMemberKeywordColors(Dictionary memberKeyword)
    {
        Object.SetMemberKeywordColors(memberKeyword);
    }

    public void ClearMemberKeywordColors()
    {
        Object.ClearMemberKeywordColors();
    }

    public Dictionary GetMemberKeywordColors() => Object.GetMemberKeywordColors();

    public void AddColorRegion(string startKey, string endKey, Color color, bool lineOnly = false)
    {
        Object.AddColorRegion(startKey, endKey, color, lineOnly);
    }

    public void RemoveColorRegion(string startKey)
    {
        Object.RemoveColorRegion(startKey);
    }

    public bool HasColorRegion(string startKey) => Object.HasColorRegion(startKey);

    public void SetColorRegions(Dictionary colorRegions)
    {
        Object.SetColorRegions(colorRegions);
    }

    public void ClearColorRegions()
    {
        Object.ClearColorRegions();
    }

    public Dictionary GetColorRegions() => Object.GetColorRegions();

    public void SetFunctionColor(Color color)
    {
        Object.SetFunctionColor(color);
    }

    public Color GetFunctionColor() => Object.GetFunctionColor();

    public void SetNumberColor(Color color)
    {
        Object.SetNumberColor(color);
    }

    public Color GetNumberColor() => Object.GetNumberColor();

    public void SetSymbolColor(Color color)
    {
        Object.SetSymbolColor(color);
    }

    public Color GetSymbolColor() => Object.GetSymbolColor();

    public void SetMemberVariableColor(Color color)
    {
        Object.SetMemberVariableColor(color);
    }

    public Color GetMemberVariableColor() => Object.GetMemberVariableColor();

    public Dictionary GetLineSyntaxHighlighting(int line) => Object.GetLineSyntaxHighlighting(line);

    public void UpdateCache()
    {
        Object.UpdateCache();
    }

    public void ClearHighlightingCache()
    {
        Object.ClearHighlightingCache();
    }

    public TextEdit GetTextEdit() => Object.GetTextEdit();

    public void SetPath(string path)
    {
        Object.SetPath(path);
    }

    public void TakeOverPath(string path)
    {
        Object.TakeOverPath(path);
    }

    public string GetPath() => Object.GetPath();

    public void SetPathCache(string path)
    {
        Object.SetPathCache(path);
    }

    public void SetName(string name)
    {
        Object.SetName(name);
    }

    public string GetName() => Object.GetName();

    public Rid GetRid() => Object.GetRid();

    public void SetLocalToScene(bool enable)
    {
        Object.SetLocalToScene(enable);
    }

    public bool IsLocalToScene() => Object.IsLocalToScene();

    public Node GetLocalScene() => Object.GetLocalScene();

    [Obsolete("This method should only be called internally.")]
    public void SetupLocalToScene()
    {
        Object.SetupLocalToScene();
    }

    public void ResetState()
    {
        Object.ResetState();
    }

    public void SetIdForPath(string path, string id)
    {
        Object.SetIdForPath(path, id);
    }

    public string GetIdForPath(string path) => Object.GetIdForPath(path);

    public bool IsBuiltIn() => Object.IsBuiltIn();

    public static string GenerateSceneUniqueId() => Resource.GenerateSceneUniqueId();

    public void SetSceneUniqueId(string id)
    {
        Object.SetSceneUniqueId(id);
    }

    public string GetSceneUniqueId() => Object.GetSceneUniqueId();

    public void EmitChanged()
    {
        Object.EmitChanged();
    }

    public Resource Duplicate(bool deep = false) => Object.Duplicate(deep);

    public Resource DuplicateDeep(Resource.DeepDuplicateMode deepSubresourcesMode = (Resource.DeepDuplicateMode)1) =>
        Object.DuplicateDeep(deepSubresourcesMode);

    public bool InitRef() => Object.InitRef();

    public bool Reference() => Object.Reference();

    public bool Unreference() => Object.Unreference();

    public int GetReferenceCount() => Object.GetReferenceCount();

    public void Free()
    {
        Object.Free();
    }

    public string GetClass() => Object.GetClass();

    public bool IsClass(string @class) => Object.IsClass(@class);

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property) => Object.Get(property);

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath) => Object.GetIndexed(propertyPath);

    public Array<Dictionary> GetPropertyList() => Object.GetPropertyList();

    public Array<Dictionary> GetMethodList() => Object.GetMethodList();

    public bool PropertyCanRevert(StringName property) => Object.PropertyCanRevert(property);

    public Variant PropertyGetRevert(StringName property) => Object.PropertyGetRevert(property);

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString() => Object.ToString();

    public ulong GetInstanceId() => Object.GetInstanceId();

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript() => Object.GetScript();

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default) => Object.GetMeta(name, @default);

    public bool HasMeta(StringName name) => Object.HasMeta(name);

    public Array<StringName> GetMetaList() => Object.GetMetaList();

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal) => Object.HasUserSignal(signal);

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs) => Object.EmitSignal(signal, varargs);

    public Variant Call(StringName method, params Variant[] varargs) => Object.Call(method, varargs);

    public Variant CallDeferred(StringName method, params Variant[] varargs) => Object.CallDeferred(method, varargs);

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray) => Object.Callv(method, argArray);

    public bool HasMethod(StringName method) => Object.HasMethod(method);

    public int GetMethodArgumentCount(StringName method) => Object.GetMethodArgumentCount(method);

    public bool HasSignal(StringName signal) => Object.HasSignal(signal);

    public Array<Dictionary> GetSignalList() => Object.GetSignalList();

    public Array<Dictionary> GetSignalConnectionList(StringName signal) => Object.GetSignalConnectionList(signal);

    public Array<Dictionary> GetIncomingConnections() => Object.GetIncomingConnections();

    public Error Connect(StringName signal, Callable callable, uint flags = 0) =>
        Object.Connect(signal, callable, flags);

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable) => Object.IsConnected(signal, callable);

    public bool HasConnections(StringName signal) => Object.HasConnections(signal);

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals() => Object.IsBlockingSignals();

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages() => Object.CanTranslateMessages();

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain() => Object.GetTranslationDomain();

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion() => Object.IsQueuedForDeletion();

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action Changed
    {
        add => Connect(Resource.SignalName.Changed, Callable.From(value));
        remove => Disconnect(Resource.SignalName.Changed, Callable.From(value));
    }

    public event Action SetupLocalToSceneRequested
    {
        add => Connect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
        remove => Disconnect(Resource.SignalName.SetupLocalToSceneRequested, Callable.From(value));
    }

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}