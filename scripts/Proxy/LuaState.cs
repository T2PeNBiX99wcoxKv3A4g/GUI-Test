// ReSharper disable CommentTypo
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedType.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable EventNeverSubscribedTo.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable MemberHidesStaticFromOuterClass
// This code was automatically generated by GDExtension C# Bindgen
#pragma warning disable CS8604

using System;
using Godot;
using Godot.Collections;
using Array = Godot.Collections.Array;

namespace GUITest.scripts.Proxy;

public class LuaState
{
    // Engine object used for calling engine methods
    protected readonly RefCounted Object;

    public LuaState() : this(NativeName)
    {
    }

    protected LuaState(StringName @class) : this(ClassDB.Instantiate(@class))
    {
    }

    protected LuaState(Variant variant) : this((RefCounted)variant)
    {
    }

    protected LuaState(RefCounted @object)
    {
        Object = @object;
    }

    public static implicit operator RefCounted(LuaState self) => self.Object;
    public static implicit operator Variant(LuaState self) => self.Object;
    public static explicit operator LuaState(Variant variant) => new(variant.AsGodotObject());

    public class PropertyName : RefCounted.PropertyName
    {
        public static readonly StringName Globals = "globals";
        public static readonly StringName Registry = "registry";
        public static readonly StringName MainThread = "main_thread";
        public static readonly StringName PackagePath = "package_path";
        public static readonly StringName PackageCpath = "package_cpath";
    }

    public class MethodName : RefCounted.MethodName
    {
        public static readonly StringName OpenLibraries = "open_libraries";
        public static readonly StringName AreLibrariesOpened = "are_libraries_opened";
        public static readonly StringName CreateTable = "create_table";
        public static readonly StringName CreateFunction = "create_function";
        public static readonly StringName LoadBuffer = "load_buffer";
        public static readonly StringName LoadString = "load_string";
        public static readonly StringName LoadFile = "load_file";
        public static readonly StringName DoBuffer = "do_buffer";
        public static readonly StringName DoString = "do_string";
        public static readonly StringName DoFile = "do_file";
        public static readonly StringName GetGlobals = "get_globals";
        public static readonly StringName GetRegistry = "get_registry";
        public static readonly StringName GetMainThread = "get_main_thread";
        public static readonly StringName GetPackagePath = "get_package_path";
        public static readonly StringName GetPackageCpath = "get_package_cpath";
        public static readonly StringName SetPackagePath = "set_package_path";
        public static readonly StringName SetPackageCpath = "set_package_cpath";
        public static readonly StringName GetLuaRuntime = "get_lua_runtime";
        public static readonly StringName GetLuaVersionNum = "get_lua_version_num";
        public static readonly StringName GetLuaVersionString = "get_lua_version_string";
        public static readonly StringName GetLuaExecDir = "get_lua_exec_dir";
    }

    public class SignalName : RefCounted.SignalName
    {
    }

    private static readonly StringName NativeName = "LuaState";

    #region Enums

    [Flags]
    public enum Library : long
    {
        LuaBase = 1L,
        LuaPackage = 2L,
        LuaCoroutine = 4L,
        LuaString = 8L,
        LuaOs = 16L,
        LuaMath = 32L,
        LuaTable = 64L,
        LuaDebug = 128L,
        LuaBit32 = 256L,
        LuaIo = 512L,
        LuaFfi = 1024L,
        LuaJit = 2048L,
        LuaUtf8 = 4096L,
        LuaAllLibs = 8191L,
        GodotVariant = 8192L,
        GodotUtilityFunctions = 16384L,
        GodotSingletons = 32768L,
        GodotClasses = 65536L,
        GodotEnums = 131072L,
        GodotLocalPaths = 262144L,
        GodotAllLibs = 516096L,
        AllLibs = 524287L,
    }

    public enum LoadMode : long
    {
        Any = 0L,
        Text = 1L,
        Binary = 2L,
    }

    #endregion

    #region Properties

    public LuaTable Globals => (LuaTable)Object.Get(PropertyName.Globals);

    public LuaTable Registry => (LuaTable)Object.Get(PropertyName.Registry);

    public LuaThread MainThread => (LuaThread)Object.Get(PropertyName.MainThread);

    public string PackagePath
    {
        get => (string)Object.Get(PropertyName.PackagePath);
        set => Object.Set(PropertyName.PackagePath, value);
    }

    public string PackageCpath
    {
        get => (string)Object.Get(PropertyName.PackageCpath);
        set => Object.Set(PropertyName.PackageCpath, value);
    }

    #endregion

    #region Methods

    public void OpenLibraries(Library libraries = (Library)524287)
    {
        Object.Call(MethodName.OpenLibraries, (int)libraries);
    }

    public bool AreLibrariesOpened(Library libraries)
    {
        return (bool)Object.Call(MethodName.AreLibrariesOpened, (int)libraries);
    }

    public LuaTable CreateTable(Dictionary? initialValues = null)
    {
        initialValues ??= new Dictionary();
        return (LuaTable)Object.Call(MethodName.CreateTable, initialValues);
    }

    public LuaFunction CreateFunction(Callable callable)
    {
        return (LuaFunction)Object.Call(MethodName.CreateFunction, callable);
    }

    public Variant LoadBuffer(byte[] chunk, string chunkname = "", LoadMode mode = 0, LuaTable? env = null)
    {
        return Object.Call(MethodName.LoadBuffer, chunk, chunkname, (int)mode, env);
    }

    public Variant LoadString(string chunk, string chunkname = "", LuaTable? env = null)
    {
        return Object.Call(MethodName.LoadString, chunk, chunkname, env);
    }

    public Variant LoadFile(string filename, LoadMode mode = 0, LuaTable? env = null)
    {
        return Object.Call(MethodName.LoadFile, filename, (int)mode, env);
    }

    public Variant DoBuffer(byte[] chunk, string chunkname = "", LoadMode mode = 0, LuaTable? env = null)
    {
        return Object.Call(MethodName.DoBuffer, chunk, chunkname, (int)mode, env);
    }

    public Variant DoString(string chunk, string chunkname = "", LuaTable? env = null)
    {
        return Object.Call(MethodName.DoString, chunk, chunkname, env);
    }

    public Variant DoFile(string filename, LoadMode mode = 0, LuaTable? env = null)
    {
        return Object.Call(MethodName.DoFile, filename, (int)mode, env);
    }

    public LuaTable GetGlobals()
    {
        return (LuaTable)Object.Call(MethodName.GetGlobals);
    }

    public LuaTable GetRegistry()
    {
        return (LuaTable)Object.Call(MethodName.GetRegistry);
    }

    public LuaThread GetMainThread()
    {
        return (LuaThread)Object.Call(MethodName.GetMainThread);
    }

    public string GetPackagePath()
    {
        return (string)Object.Call(MethodName.GetPackagePath);
    }

    public string GetPackageCpath()
    {
        return (string)Object.Call(MethodName.GetPackageCpath);
    }

    public void SetPackagePath(string path)
    {
        Object.Call(MethodName.SetPackagePath, path);
    }

    public void SetPackageCpath(string cpath)
    {
        Object.Call(MethodName.SetPackageCpath, cpath);
    }

    public static string GetLuaRuntime()
    {
        return (string)ClassDB.ClassCallStatic(NativeName, MethodName.GetLuaRuntime);
    }

    public static int GetLuaVersionNum()
    {
        return (int)ClassDB.ClassCallStatic(NativeName, MethodName.GetLuaVersionNum);
    }

    public static string GetLuaVersionString()
    {
        return (string)ClassDB.ClassCallStatic(NativeName, MethodName.GetLuaVersionString);
    }

    public static string GetLuaExecDir()
    {
        return (string)ClassDB.ClassCallStatic(NativeName, MethodName.GetLuaExecDir);
    }

    #endregion

    #region Inherited Methods

    public bool InitRef()
    {
        return Object.InitRef();
    }

    public bool Reference()
    {
        return Object.Reference();
    }

    public bool Unreference()
    {
        return Object.Unreference();
    }

    public int GetReferenceCount()
    {
        return Object.GetReferenceCount();
    }

    public void Free()
    {
        Object.Free();
    }

    public string GetClass()
    {
        return Object.GetClass();
    }

    public bool IsClass(string @class)
    {
        return Object.IsClass(@class);
    }

    public void Set(StringName property, Variant value)
    {
        Object.Set(property, value);
    }

    public Variant Get(StringName property)
    {
        return Object.Get(property);
    }

    public void SetIndexed(NodePath propertyPath, Variant value)
    {
        Object.SetIndexed(propertyPath, value);
    }

    public Variant GetIndexed(NodePath propertyPath)
    {
        return Object.GetIndexed(propertyPath);
    }

    public Array<Dictionary> GetPropertyList()
    {
        return Object.GetPropertyList();
    }

    public Array<Dictionary> GetMethodList()
    {
        return Object.GetMethodList();
    }

    public bool PropertyCanRevert(StringName property)
    {
        return Object.PropertyCanRevert(property);
    }

    public Variant PropertyGetRevert(StringName property)
    {
        return Object.PropertyGetRevert(property);
    }

    public void Notification(int what, bool reversed = false)
    {
        Object.Notification(what, reversed);
    }

    public override string ToString()
    {
        return Object.ToString();
    }

    public ulong GetInstanceId()
    {
        return Object.GetInstanceId();
    }

    public void SetScript(Variant script)
    {
        Object.SetScript(script);
    }

    public Variant GetScript()
    {
        return Object.GetScript();
    }

    public void SetMeta(StringName name, Variant value)
    {
        Object.SetMeta(name, value);
    }

    public void RemoveMeta(StringName name)
    {
        Object.RemoveMeta(name);
    }

    public Variant GetMeta(StringName name, Variant @default = default)
    {
        return Object.GetMeta(name, @default);
    }

    public bool HasMeta(StringName name)
    {
        return Object.HasMeta(name);
    }

    public Array<StringName> GetMetaList()
    {
        return Object.GetMetaList();
    }

    public void AddUserSignal(string signal, Array? arguments = null)
    {
        arguments ??= new Array();
        Object.AddUserSignal(signal, arguments);
    }

    public bool HasUserSignal(StringName signal)
    {
        return Object.HasUserSignal(signal);
    }

    public void RemoveUserSignal(StringName signal)
    {
        Object.RemoveUserSignal(signal);
    }

    public Error EmitSignal(StringName signal, params Variant[] varargs)
    {
        return Object.EmitSignal(signal, varargs);
    }

    public Variant Call(StringName method, params Variant[] varargs)
    {
        return Object.Call(method, varargs);
    }

    public Variant CallDeferred(StringName method, params Variant[] varargs)
    {
        return Object.CallDeferred(method, varargs);
    }

    public void SetDeferred(StringName property, Variant value)
    {
        Object.SetDeferred(property, value);
    }

    public Variant Callv(StringName method, Array argArray)
    {
        return Object.Callv(method, argArray);
    }

    public bool HasMethod(StringName method)
    {
        return Object.HasMethod(method);
    }

    public int GetMethodArgumentCount(StringName method)
    {
        return Object.GetMethodArgumentCount(method);
    }

    public bool HasSignal(StringName signal)
    {
        return Object.HasSignal(signal);
    }

    public Array<Dictionary> GetSignalList()
    {
        return Object.GetSignalList();
    }

    public Array<Dictionary> GetSignalConnectionList(StringName signal)
    {
        return Object.GetSignalConnectionList(signal);
    }

    public Array<Dictionary> GetIncomingConnections()
    {
        return Object.GetIncomingConnections();
    }

    public Error Connect(StringName signal, Callable callable, uint flags = 0)
    {
        return Object.Connect(signal, callable, flags);
    }

    public void Disconnect(StringName signal, Callable callable)
    {
        Object.Disconnect(signal, callable);
    }

    public bool IsConnected(StringName signal, Callable callable)
    {
        return Object.IsConnected(signal, callable);
    }

    public bool HasConnections(StringName signal)
    {
        return Object.HasConnections(signal);
    }

    public void SetBlockSignals(bool enable)
    {
        Object.SetBlockSignals(enable);
    }

    public bool IsBlockingSignals()
    {
        return Object.IsBlockingSignals();
    }

    public void NotifyPropertyListChanged()
    {
        Object.NotifyPropertyListChanged();
    }

    public void SetMessageTranslation(bool enable)
    {
        Object.SetMessageTranslation(enable);
    }

    public bool CanTranslateMessages()
    {
        return Object.CanTranslateMessages();
    }

    public string Tr(StringName message, StringName? context = null)
    {
        context ??= "";
        return Object.Tr(message, context);
    }

    public string TrN(StringName message, StringName pluralMessage, int n, StringName? context = null)
    {
        context ??= "";
        return Object.TrN(message, pluralMessage, n, context);
    }

    public StringName GetTranslationDomain()
    {
        return Object.GetTranslationDomain();
    }

    public void SetTranslationDomain(StringName domain)
    {
        Object.SetTranslationDomain(domain);
    }

    public bool IsQueuedForDeletion()
    {
        return Object.IsQueuedForDeletion();
    }

    public void CancelFree()
    {
        Object.CancelFree();
    }

    #endregion

    #region Inherited Signals

    public event Action ScriptChanged
    {
        add => Connect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.ScriptChanged, Callable.From(value));
    }

    public event Action PropertyListChanged
    {
        add => Connect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
        remove => Disconnect(GodotObject.SignalName.PropertyListChanged, Callable.From(value));
    }

    #endregion
}